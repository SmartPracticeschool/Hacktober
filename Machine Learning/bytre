# -*- coding: utf-8 -*-
"""
Created on Sun May 17 18:28:01 2020

@author: HP
"""

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd

data=pd.read_csv('german_credit_data (1).csv')
x=pd.DataFrame(data.iloc[:,1:-2].values)
y=pd.DataFrame(data.iloc[:,10].values)

from sklearn.preprocessing import LabelEncoder, OneHotEncoder
labelencoder_X = LabelEncoder()
x[1] = labelencoder_X.fit_transform(x[1])
x[3] = labelencoder_X.fit_transform(x[3])
x[4] = labelencoder_X.fit_transform(x[4])
x[5] = labelencoder_X.fit_transform(x[5])
onehotencoder = OneHotEncoder(categorical_features=[3])
x= onehotencoder.fit_transform(x).toarray()
x=x[:,1:10]
onehotencoder = OneHotEncoder(categorical_features=[4])
x= onehotencoder.fit_transform(x).toarray()
x=x[:,1:12]
onehotencoder = OneHotEncoder(categorical_features=[7])
x= onehotencoder.fit_transform(x).toarray()
x=x[:,1:15]
onehotencoder = OneHotEncoder(categorical_features=[10])
x= onehotencoder.fit_transform(x).toarray()
x=x[:,1:16]

labelencoder_y = LabelEncoder()
y = labelencoder_y.fit_transform(y)

from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.1,random_state=0)

from sklearn.preprocessing import StandardScaler
sc = StandardScaler()
x_train = sc.fit_transform(x_train)
x_test = sc.transform(x_test)

from sklearn.discriminant_analysis import LinearDiscriminantAnalysis as LDA
lda = LDA(n_components = None)
x_train = lda.fit_transform(x_train, y_train)
x_test = lda.transform(x_test)
accuracies=lda.explained_variance_ratio_

from sklearn.tree import DecisionTreeClassifier
classifier = DecisionTreeClassifier(criterion = 'entropy', random_state = 0)
classifier.fit(x_train, y_train)
y_pred = classifier.predict(x_test)
classifier.score(x_train,y_train)

from sklearn.model_selection import cross_val_score
accuracies = cross_val_score(estimator = classifier, X = x_train, y = y_train, cv = 10)
accuracies.mean()
accuracies.std()

from sklearn.metrics import confusion_matrix
cm = confusion_matrix(y_test, y_pred)

from sklearn.metrics import roc_curve
lr_fpr, lr_tpr, _ = roc_curve(y_test, y_pred)
plt.plot(lr_fpr, lr_tpr, marker='.', label='Decision_tree')
